<?php
$translate = $this->plugin('translate');
$escape = $this->plugin('escapeHtml');
$thumbnail = $this->plugin('thumbnail');
$filterLocale = (bool) $this->siteSetting('filter_locale_values');
$lang = $this->lang();
$valueLang = $filterLocale ? [$lang, ''] : null;
$query = $this->params()->fromQuery();
$hierarchyHeadingLevel = "h2";
$hierarchyItemSets = [];

$this->headScript()->appendFile($this->assetUrl('js/browse.js'));
$this->headLink()->appendStylesheet($this->assetUrl('css/hierarchy.css', 'Hierarchy'));
$this->headLink()->appendStylesheet($this->assetUrl('css/resource-page-blocks.css', 'Omeka'));
$this->htmlElement('body')->appendAttribute('class', 'item resource browse hierarchy-module');
?>
<?php
if ($hierarchyGrouping->getLabel()) {
    echo $this->pageTitle($hierarchyGrouping->getLabel(), 2);
    $hierarchyHeadingLevel = 'h3';
}
?>
<div class="hierarchy-row">
<?php 
// Iterate through groupings to create nested list in metadata sidebar
$iterate = function ($groupings, $itemSet) use (&$iterate, &$allGroupings, &$printedGroupings, &$currentHierarchy, &$childCount, &$hierarchyItemSets, $hierarchyGrouping, $valueLang, $hierarchyHeadingLevel) {
    foreach ($groupings as $key => $grouping) {
        // Continue if grouping has already been printed
        if (isset($printedGroupings) && in_array($grouping, $printedGroupings)) {
            continue;
        }

        if ($currentHierarchy != $grouping->getHierarchy()) {
            if (!is_null($currentHierarchy)) {
                echo '</ul>';
            }
            $currentHierarchy = $grouping->getHierarchy();
            // Show label if hierarchy_show_label checked in config
            if ($this->siteSetting('hierarchy_show_label') && $currentHierarchy->getLabel()) {
                echo "<$hierarchyHeadingLevel>" . $currentHierarchy->getLabel() . "</$hierarchyHeadingLevel>";
            }
            echo '<ul class="hierarchy-list">';

            $allGroupings = $this->api()->search('hierarchy_grouping', ['hierarchy' => $currentHierarchy, 'sort_by' => 'position'])->getContent();
            $iterate($allGroupings, $itemSet);
            continue;
        }

        if ($grouping->getParentGrouping() != 0) {
            // $iterate through any groupings with current grouping as child
            $parentArray = array_filter($allGroupings, function($parent) use($grouping) {
                return $parent->id() == $grouping->getParentGrouping();
            });
            if (count($parentArray) > 0) {
                $iterate($parentArray, $itemSet);
                continue;
            }
        }

        if ($grouping->getItemSet()) {
            try {
                // If no grouping label, show itemSet title as grouping heading
                $groupingLabel = $grouping->getLabel() ?: $grouping->getItemSet()->displayTitle(null, $valueLang);
                $itemSet = $this->api()->read('item_sets', $grouping->getItemSet()->id())->getContent();
                $hierarchyItemSets[] = $itemSet;
            } catch (\Exception $e) {
                // Print groupings with private itemSet
                $itemSet = '';
                $groupingLabel = $grouping->getLabel() ?: $this->translate('Private');
            }
        } else {
            // Print groupings without assigned itemSet
            $itemSet = null;
            $groupingLabel = $grouping->getLabel() ?: $this->translate('[Untitled]');
            // Show (combined child) itemSet count if hierarchy_show_count checked in config
            $itemSetCount = $this->hierarchyHelper()->itemSetCount($grouping, $allGroupings);

            if ($this->siteSetting('hierarchy_show_count') && $itemSetCount != null) {
                // Bold current page grouping
                if ($grouping->id() == $hierarchyGrouping->id()) {
                    echo '<li><b>' . $this->hyperlink($groupingLabel, $this->url('site/hierarchy', ['site-slug' => $this->currentSite()->slug(), 'grouping-id' => $grouping->id()])) . '</b>' . $itemSetCount;
                } else {
                    echo '<li>' . $this->hyperlink($groupingLabel, $this->url('site/hierarchy', ['site-slug' => $this->currentSite()->slug(), 'grouping-id' => $grouping->id()])) . $itemSetCount;
                }
            } else if (!empty($groupingLabel) && $itemSetCount != null) {
                // Bold current page grouping
                if ($grouping->id() == $hierarchyGrouping->id()) {
                    echo '<li><b>' . $this->hyperlink($groupingLabel, $this->url('site/hierarchy', ['site-slug' => $this->currentSite()->slug(), 'grouping-id' => $grouping->id()])) . '</b>';
                } else {
                    echo '<li>' . $this->hyperlink($groupingLabel, $this->url('site/hierarchy', ['site-slug' => $this->currentSite()->slug(), 'grouping-id' => $grouping->id()]));
                }
            } else if (!empty($groupingLabel)) {
                echo '<li>' . $groupingLabel;
            }
        }

        if (!is_null($itemSet)) {
            // Show itemSet count if hierarchy_show_count checked in config
            $itemSetCount = $this->siteSetting('hierarchy_show_count') ? $this->hierarchyHelper()->itemSetCount($grouping, $allGroupings) : '';
            // Bold current page grouping
            if (!empty($groupingLabel)) {
                if ($grouping->id() == $hierarchyGrouping->id()) {
                    echo '<li><b>' . $this->hyperlink($groupingLabel, $this->url('site/hierarchy', ['site-slug' => $this->currentSite()->slug(), 'grouping-id' => $grouping->id()])) . '</b>' . $itemSetCount;
                } else {
                    echo '<li>' . $this->hyperlink($groupingLabel, $this->url('site/hierarchy', ['site-slug' => $this->currentSite()->slug(), 'grouping-id' => $grouping->id()])) . $itemSetCount;
                }
            }
        }

        // Return any groupings with current grouping as parent
        $childArray = array_filter($allGroupings, function($child) use($grouping) {
            return $child->getParentGrouping() == $grouping->id();
        });

        // Remove already printed groupings from $allGroupings array
        $allGroupings = array_filter($allGroupings, function($child) use($grouping) {
            return $child->id() != $grouping->id();
        });
        
        $printedGroupings[] = $grouping;

        if (count($childArray) > 0) {
            // Handle multidimensional hierarchies by saving/retrieving previous state
            $prevChildArray = $childArray ?: [];
            $childCount = count($childArray);
            echo '<ul>';
            $iterate($childArray, $itemSet);
            echo '</ul></li>';
            $childArray = $prevChildArray;
            continue;
        } elseif ($childCount >= 1) {
            echo '</li>';
            // Keep other variables the same if iterating 'sibling'
            $childCount--;
            continue;
        } else {
            echo '</li>';
        }
    }
    return array_unique($hierarchyItemSets, SORT_REGULAR);
};

$groupings = $this->api()->search('hierarchy_grouping', ['id' => $hierarchyGrouping->id(), 'sort_by' => 'position'])->getContent();
if ($groupings) {
    echo '<div class="hierarchy-metadata"><div class="hierarchy-filters">';
    $hierarchyItemSets = $iterate($groupings, $itemSet);
    echo '</div>';
    echo '<div class="hierarchy-item-sets">';
    if (count($hierarchyItemSets) == 1) {
        $itemSet = $hierarchyItemSets[0];
        echo 'Contains resources from: ';
        echo $itemSet->link($itemSet->displayTitle());
    } else if (count($hierarchyItemSets) > 1) {
        $finalItemSet = end($hierarchyItemSets);
        echo 'Contains resources from: ';
        foreach ($hierarchyItemSets as $itemSet) {
            echo $itemSet->link($itemSet->displayTitle());
            if ($itemSet != $finalItemSet) {
                echo ', ';
            }
        }
    }
    echo '</div></div>';
}
?>

    <div class="hierarchy-items">
        <?php echo '<h3>' . $escape($translate('Items')) . '</h3>'; ?>

        <?php echo $this->searchFilters(); ?>

        <?php 
            $layoutSetting = $this->themeSetting('browse_layout', 'grid');
            $gridState = ($layoutSetting == 'togglegrid') ? 'disabled' : '';
            $listState = ($layoutSetting == 'togglelist') ? 'disabled': '';
            $currentLayout = (strpos($layoutSetting, 'grid') !== false) ? 'grid' : 'list';
        ?>
        <div class="browse-controls">
            <?php if (strpos($layoutSetting, 'toggle') !== false): ?>
            <div class="layout-toggle">
                <button type="button" aria-label="<?php echo $translate('Grid'); ?>" title="<?php echo $translate('Grid'); ?>" class="grid o-icon-grid" <?php echo $gridState; ?>></button>
                <button type="button" aria-label="<?php echo $translate('List'); ?>" title="<?php echo $translate('List'); ?>" class="list o-icon-list" <?php echo $listState; ?>></button>        
            </div>
            <?php endif; ?>
            <?php echo $this->hyperlink($translate('Advanced search'), $this->url('site/resource', ['controller' => 'item', 'action' => 'search'], true), ['class' => 'advanced-search']); ?>
            <?php echo $this->pagination(); ?>
            <?php echo $this->browse()->renderSortSelector('items'); ?>
        </div>

        <?php $this->trigger('view.browse.before'); ?>
        <ul class="resource-list">
        <?php
        $headingTerm = $this->siteSetting('browse_heading_property_term');
        $bodyTerm = $this->siteSetting('browse_body_property_term');
        foreach ($items as $item):
            $heading = $headingTerm ? $item->value($headingTerm, ['default' => $translate('[Untitled]'), 'lang' => $valueLang]) : $item->displayTitle(null, $valueLang);
            $body = $bodyTerm ? $item->value($bodyTerm, ['lang' => $valueLang]) : $item->displayDescription(null, $valueLang);
        ?>
            <li class="item resource">
                <?php
                $linkContent = sprintf('%s<span class="resource-name">%s</span>',
                    $thumbnail($item, 'medium'),
                    $escape($heading));
                echo $item->linkRaw($linkContent, null, ['class' => 'resource-link']);
                ?>
            </li>
        <?php endforeach; ?>
        </ul>
        <div class="browse-controls">
            <?php echo $this->pagination(); ?>
        </div>
        <?php $this->trigger('view.browse.after'); ?>
    </div>
</div>
